{"version":3,"sources":["comps/Front.js","comps/Contact.js","comps/Projects.js","comps/riv/RIV.jsx","App.js","serviceWorker.js","index.js"],"names":["Front","className","Navbar","bg","expand","Toggle","aria-controls","Collapse","id","Nav","Link","href","Jumbotron","fluid","Component","Contact","Projects","to","RIV","props","renderMyData","lim","url","URL","state","subR","params","limit","Object","keys","forEach","key","searchParams","append","fetch","then","response","json","responseJson","tmpArray","rJ","data","children","i","length","push","setState","nextPic","catch","error","console","handleInputChange","event","target","value","name","handlePicChange","addV","onClick","type","onChange","this","class","src","alt","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.27e68f12.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Front.css\";\r\n\r\n//Bootstrap - for nav\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\n\r\nexport default class Front extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"frontMain\">\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n              <Nav.Link href=\"#home\">Projects</Nav.Link>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n\r\n        <Jumbotron fluid className=\"frontMain\">\r\n          <div className=\"myName\">Hi, my name is Nesan.</div>\r\n\r\n          <div className=\"myFrom\">I'm from</div>\r\n        </Jumbotron>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Contact() {\r\n  return (\r\n    <div className=\"Contact\">\r\n      <h3>https://github.com/Messier81</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contact;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Projects() {\r\n  return (\r\n    <div className=\"Projects\">\r\n      <Link to=\"/riv\">\r\n        <li>Reddit Image Viewer</li>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Projects;\r\n","import React, { Component } from \"react\";\r\nimport \"./RIV.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class RIV extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      data: null,\r\n      subR: \"\",\r\n      nextPic: 0,\r\n    };\r\n  }\r\n\r\n  // componentDidMount() {\r\n  //   this.renderMyData();\r\n  // }\r\n\r\n  renderMyData = (lim) => {\r\n    var url = new URL(`https://www.reddit.com/r/${this.state.subR}/.json`),\r\n      params = { limit: lim };\r\n    Object.keys(params).forEach((key) =>\r\n      url.searchParams.append(key, params[key])\r\n    );\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((responseJson) => {\r\n        let tmpArray = [];\r\n        let rJ = responseJson.data.children;\r\n        for (var i = 0; i < rJ.length; i++) {\r\n          tmpArray.push(rJ[i].data.url);\r\n        }\r\n        //DELETE NEXTPIC, FOR TESTING PURPOSES ONLY\r\n        this.setState({ data: tmpArray, nextPic: 0 });\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  //Change index of array containing pictures so the next or the previous image is accessed, via adding/subtracting 1\r\n  handlePicChange = (addV) => {\r\n    this.setState({\r\n      nextPic: this.state.nextPic + addV,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <Link to=\"/\" className=\"topNav\">\r\n          <span>Home</span>\r\n        </Link>\r\n        <span className=\"topNav\" onClick={() => this.renderMyData(100)}>\r\n          Search\r\n        </span>\r\n        <input\r\n          className=\"topNav\"\r\n          type=\"text\"\r\n          name=\"subR\"\r\n          onChange={this.handleInputChange}\r\n        />\r\n\r\n        {this.state.data ? (\r\n          <div class=\"container\">\r\n            <img\r\n              className=\"img-fluid\"\r\n              src={this.state.data[this.state.nextPic]}\r\n              alt=\"\"\r\n            />\r\n          </div>\r\n        ) : (\r\n          <div>LOAD</div>\r\n        )}\r\n        <div className=\"botNavCont\">\r\n          <span className=\"botNav\" onClick={() => this.handlePicChange(-1)}>\r\n            Previous\r\n          </span>\r\n          <span className=\"botNav\" onClick={() => this.handlePicChange(1)}>\r\n            Next\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Front from \"./comps/Front\";\r\nimport Contact from \"./comps/Contact\";\r\nimport Projects from \"./comps/Projects\";\r\n\r\n/* Projects */\r\nimport RIV from \"./comps/riv/RIV\";\r\n\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Front} />\r\n          <Route path=\"/pweb/\" exact component={Front} />\r\n          <Route path=\"/contact\" component={Contact} />\r\n          <Route path=\"/projects\" component={Projects} />\r\n          <Route path=\"/riv\" component={RIV} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}