{"version":3,"sources":["comps/Front.js","comps/Nav.js","comps/Contact.js","comps/Projects.js","comps/gtest/Graph.jsx","comps/gtest/GraphTester.jsx","App.js","serviceWorker.js","index.js"],"names":["Front","className","Nav","to","href","Contact","Projects","Graph","props","handleVerChange","event","setState","verText","target","value","state","numOfVer","adjList","Map","verFrom","verTo","this","has","mClone","set","onClick","addVertex","type","name","onChange","addEdge","handleECFrom","handleECTo","Component","GraphTester","numberOfVertices","React","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAWeA,MATf,WACI,OACI,yBAAKC,UAAU,SACX,6BACA,gD,eCsBGC,MArBf,WACI,OACI,yBAAKD,UAAU,YACX,wBAAIA,UAAU,aACV,kBAAC,IAAD,CAAME,GAAG,KACL,qCAEJ,kBAAC,IAAD,CAAMA,GAAG,aACL,yCAEJ,4BAAI,uBAAGC,KAAK,gCAAR,WACJ,4BAAI,uBAAGA,KAAK,gCAAR,WACJ,4BAAI,uBAAGA,KAAK,gCAAR,aACJ,kBAAC,IAAD,CAAMD,GAAG,YACL,2CCXLE,MARf,WACE,OACE,yBAAKJ,UAAU,WACb,8DCQSK,MAVf,WACI,OACI,yBAAKL,UAAU,YACX,kBAAC,IAAD,CAAME,GAAG,WACL,0C,uCCLKI,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAWRC,gBAAkB,SAAAC,GAChB,EAAKC,SAAS,CAAEC,QAASF,EAAMG,OAAOC,SAXtC,EAAKC,MAAQ,CACXC,SAAU,EACVC,QAAS,IAAIC,IACbN,QAAS,GACTO,QAAS,GACTC,MAAO,IAPQ,E,yEAmBjB,IAAKC,KAAKN,MAAME,QAAQK,IAAID,KAAKN,MAAMH,SAAU,CAC/C,IAAMW,EAAS,IAAIL,IAAIG,KAAKN,MAAME,SAClCM,EAAOC,IAAIH,KAAKN,MAAMH,QAAS,IAE/BS,KAAKV,SAAS,CACZK,SAAUK,KAAKN,MAAMC,SAAW,EAChCC,QAASM,O,kEAOL,IAAD,OACP,OACE,6BACE,4BAAQE,QAAS,kBAAM,EAAKC,YAA5B,cACA,2BAAOC,KAAK,OAAOC,KAAK,UAAUC,SAAUR,KAAKZ,kBACjD,4BAAKY,KAAKN,MAAMC,UAChB,4BAAKK,KAAKN,MAAME,SAEhB,4BAAQQ,QAAS,kBAAM,EAAKK,UAA5B,YACA,2BAAOH,KAAK,OAAOC,KAAK,UAAUC,SAAUR,KAAKU,eACjD,2BAAOJ,KAAK,OAAOC,KAAK,QAAQC,SAAUR,KAAKW,kB,GA3CpBC,cCYpBC,E,iLARX,OACE,yBAAKjC,UAAU,eACb,kBAAC,EAAD,CAAOkC,iBAAkB,CAAC,IAAK,Y,GAJbC,IAAMH,W,OCuBjBI,MAjBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKpC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqC,KAAK,IAAIC,OAAK,EAACC,UAAWxC,IACjC,kBAAC,IAAD,CAAOsC,KAAK,SAASC,OAAK,EAACC,UAAWxC,IACtC,kBAAC,IAAD,CAAOsC,KAAK,WAAWE,UAAWnC,IAClC,kBAAC,IAAD,CAAOiC,KAAK,YAAYE,UAAWlC,IACnC,kBAAC,IAAD,CAAOgC,KAAK,SAASE,UAAWN,QCRtBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3a2d0b44.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Front() {\r\n    return (\r\n        <div className=\"Front\">\r\n            <br />\r\n            <h1>Hi, I'm Nesan.</h1>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Front\r\n","import React from 'react'\r\n\r\nimport './Nav.css'\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\n// Navigation bar\r\nfunction Nav() {\r\n    return (\r\n        <nav className=\"nav-main\">\r\n            <ul className=\"nav-links\">\r\n                <Link to=\"/\">\r\n                    <li>Home</li>\r\n                </Link>\r\n                <Link to=\"/projects\">\r\n                    <li>Projects</li>\r\n                </Link>\r\n                <li><a href=\"https://github.com/Messier81\">GitHub</a></li>\r\n                <li><a href=\"https://github.com/Messier81\">Resume</a></li>\r\n                <li><a href=\"https://github.com/Messier81\">LinkedIn</a></li>\r\n                <Link to=\"/contact\">\r\n                    <li>Contact</li>\r\n                </Link>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from \"react\";\r\n\r\nfunction Contact() {\r\n  return (\r\n    <div className=\"Contact\">\r\n      <h3>https://github.com/Messier81</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contact;\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Projects() {\r\n    return (\r\n        <div className=\"Projects\">\r\n            <Link to=\"/munote\">\r\n                <li>MU NOTE</li>\r\n            </Link>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Projects\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Graph extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      numOfVer: 0, //number of vertices\r\n      adjList: new Map(), //adjacency list for edges\r\n      verText: \"\", //to keep track of new vertex to be added\r\n      verFrom: \"\", //edge from this vertex\r\n      verTo: \"\" //edge to this vertex\r\n    };\r\n  }\r\n\r\n  //event handler for changes in the vertex to be added, specifically for the text field\r\n  handleVerChange = event => {\r\n    this.setState({ verText: event.target.value }); //set state as text field changes\r\n  };\r\n\r\n  //adds a vertex to the graph\r\n  addVertex() {\r\n    //to eliminate duplicate vertex\r\n    if (!this.state.adjList.has(this.state.verText)) {\r\n      const mClone = new Map(this.state.adjList); //to modify state of map\r\n      mClone.set(this.state.verText, []); //map is modified with new vertex\r\n      //new state of map is set\r\n      this.setState({\r\n        numOfVer: this.state.numOfVer + 1, //number of vertex increased by 1\r\n        adjList: mClone\r\n      });\r\n    }\r\n  }\r\n\r\n  addEdge() {}\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={() => this.addVertex}>Add Vertex</button>\r\n        <input type=\"text\" name=\"verText\" onChange={this.handleVerChange} />\r\n        <h1>{this.state.numOfVer}</h1>\r\n        <h1>{this.state.adjList}</h1>\r\n\r\n        <button onClick={() => this.addEdge}>Add Edge</button>\r\n        <input type=\"text\" name=\"verFrom\" onChange={this.handleECFrom} />\r\n        <input type=\"text\" name=\"verTo\" onChange={this.handleECTo} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./GraphTester.css\";\r\nimport Graph from \"./Graph\";\r\n\r\nclass GraphTester extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"GraphTester\">\r\n        <Graph numberOfVertices={[\"A\", \"B\"]} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GraphTester;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Front from \"./comps/Front\";\r\nimport Nav from \"./comps/Nav\";\r\nimport Contact from \"./comps/Contact\";\r\nimport Projects from \"./comps/Projects\";\r\nimport GraphTester from \"./comps/gtest/GraphTester\";\r\n\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Nav />\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Front} />\r\n          <Route path=\"/pweb/\" exact component={Front} />\r\n          <Route path=\"/contact\" component={Contact} />\r\n          <Route path=\"/projects\" component={Projects} />\r\n          <Route path=\"/gtest\" component={GraphTester} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}